{
  "version": 3,
  "sources": ["../../node_modules/react-scrollama/src/utils.js", "../../node_modules/react-scrollama/src/DebugOffset.js", "../../node_modules/react-scrollama/src/Scrollama.js", "../../node_modules/react-scrollama/node_modules/react-intersection-observer/react-intersection-observer.modern.mjs", "../../node_modules/react-scrollama/src/Step.js"],
  "sourcesContent": ["export const isOffsetInPixels = offset => typeof offset === 'string' && offset.includes('px');\n", "import React from 'react';\nimport { isOffsetInPixels } from './utils';\n\nconst markerStyles = {\n  position: 'fixed',\n  left: 0,\n  width: '100%',\n  height: 0,\n  borderTop: '2px dashed black',\n  zIndex: 9999,\n};\nconst offsetTextStyles = {\n  fontSize: '12px',\n  fontFamily: 'monospace',\n  margin: 0,\n  padding: 6,\n};\n\nconst useTop = offset => {\n  const offsetInPixels = isOffsetInPixels(offset);\n  if(offsetInPixels) {\n    return offset;\n  } else {\n    return `${offset * 100}%`\n  }\n}\n\nconst DebugOffset = ({ offset }) => {\n  const top = useTop(offset);\n  return (\n    <div style={{ ...markerStyles, top, }}>\n      <p style={offsetTextStyles}>trigger: {offset}</p>\n    </div>\n  );\n}\n\nexport default DebugOffset;\n", "import React, { useMemo, useState } from 'react';\nimport DebugOffset from './DebugOffset';\nimport { isOffsetInPixels } from './utils';\n\nconst createThreshold = (theta, height) => {\n  const count = Math.ceil(height / theta);\n  const t = [];\n  const ratio = 1 / count;\n  for (let i = 0; i <= count; i += 1) {\n    t.push(i * ratio);\n  }\n  return t;\n};\n\nconst Scrollama = props => {\n  const {\n    debug,\n    children,\n    offset = 0.3,\n    onStepEnter = () => {},\n    onStepExit = () => {},\n    onStepProgress = null,\n    threshold = 4,\n  } = props;\n  const isOffsetDefinedInPixels = isOffsetInPixels(offset)\n  const [lastScrollTop, setLastScrollTop] = useState(0);\n  const [windowInnerHeight, setWindowInnerHeight] = useState(null);\n\n  const handleSetLastScrollTop = (scrollTop) => {\n    setLastScrollTop(scrollTop);\n  };\n\n  const handleWindowResize = (e) => {\n    setWindowInnerHeight(window.innerHeight)\n  }\n\n  React.useEffect(() => {\n    if(isOffsetDefinedInPixels) {\n      window.addEventListener('resize', handleWindowResize);\n      return () => {\n        window.removeEventListener('resize', handleWindowResize);\n      };\n    }\n  }, []);\n\n  const isBrowser = typeof window !== \"undefined\";\n  const innerHeight = isBrowser ? (windowInnerHeight || window.innerHeight) : 0;\n\n  const offsetValue = isOffsetDefinedInPixels\n    ? (+offset.replace('px', '') / innerHeight)\n    : offset;\n\n  const progressThreshold = useMemo(() => createThreshold(threshold, innerHeight), [innerHeight]);\n\n  return (\n    <React.Fragment>\n      {debug && <DebugOffset offset={offset} />}\n      {React.Children.map(children, (child, i) => {\n        return React.cloneElement(child, {\n          scrollamaId: `react-scrollama-${i}`,\n          offset: offsetValue,\n          onStepEnter,\n          onStepExit,\n          onStepProgress,\n          lastScrollTop,\n          handleSetLastScrollTop,\n          progressThreshold,\n          innerHeight\n        });\n      })}\n    </React.Fragment>\n  );\n};\n\nexport default Scrollama;\n", "import * as React from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nconst observerMap = new Map();\nconst RootIds = new WeakMap();\nlet rootId = 0;\nlet unsupportedValue = undefined;\n/**\r\n * What should be the default behavior if the IntersectionObserver is unsupported?\r\n * Ideally the polyfill has been loaded, you can have the following happen:\r\n * - `undefined`: Throw an error\r\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\r\n * **/\n\nfunction defaultFallbackInView(inView) {\n  unsupportedValue = inView;\n}\n/**\r\n * Generate a unique ID for the root element\r\n * @param root\r\n */\n\nfunction getRootId(root) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n/**\r\n * Convert the options to a string Id, based on the values.\r\n * Ensures we can reuse the same observer when observing elements with the same options.\r\n * @param options\r\n */\n\n\nfunction optionsToId(options) {\n  return Object.keys(options).sort().filter(key => options[key] !== undefined).map(key => {\n    return `${key}_${key === 'root' ? getRootId(options.root) : options[key]}`;\n  }).toString();\n}\n\nfunction createObserver(options) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map();\n    let thresholds;\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        var _elements$get;\n\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView = entry.isIntersecting && thresholds.some(threshold => entry.intersectionRatio >= threshold); // @ts-ignore support IntersectionObserver v2\n\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        (_elements$get = elements.get(entry.target)) == null ? void 0 : _elements$get.forEach(callback => {\n          callback(inView, entry);\n        });\n      });\n    }, options); // Ensure we have a valid thresholds array. If not, use the threshold from the options\n\n    thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [options.threshold || 0]);\n    instance = {\n      id,\n      observer,\n      elements\n    };\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n/**\r\n * @param element - DOM Element to observe\r\n * @param callback - Callback function to trigger when intersection status changes\r\n * @param options - Intersection Observer options\r\n * @param fallbackInView - Fallback inView value.\r\n * @return Function - Cleanup function that should be triggered to unregister the observer\r\n */\n\n\nfunction observe(element, callback, options = {}, fallbackInView = unsupportedValue) {\n  if (typeof window.IntersectionObserver === 'undefined' && fallbackInView !== undefined) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio: typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds\n    });\n    return () => {// Nothing to cleanup\n    };\n  } // An observer with the same options can be reused, so lets use this fact\n\n\n  const {\n    id,\n    observer,\n    elements\n  } = createObserver(options); // Register the callback listener for this element\n\n  let callbacks = elements.get(element) || [];\n\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n\nconst _excluded = [\"children\", \"as\", \"triggerOnce\", \"threshold\", \"root\", \"rootMargin\", \"onChange\", \"skip\", \"trackVisibility\", \"delay\", \"initialInView\", \"fallbackInView\"];\n\nfunction isPlainChildren(props) {\n  return typeof props.children !== 'function';\n}\n/**\r\n ## Render props\r\n\n To use the `<InView>` component, you pass it a function. It will be called\r\n whenever the state changes, with the new value of `inView`. In addition to the\r\n `inView` prop, children also receive a `ref` that should be set on the\r\n containing DOM element. This is the element that the IntersectionObserver will\r\n monitor.\r\n\n If you need it, you can also access the\r\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\r\n on `entry`, giving you access to all the details about the current intersection\r\n state.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView>\r\n {({ inView, ref, entry }) => (\r\n      <div ref={ref}>\r\n        <h2>{`Header inside viewport ${inView}.`}</h2>\r\n      </div>\r\n    )}\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n\n ## Plain children\r\n\n You can pass any element to the `<InView />`, and it will handle creating the\r\n wrapping DOM element. Add a handler to the `onChange` method, and control the\r\n state in your own component. Any extra props you add to `<InView>` will be\r\n passed to the HTML element, allowing you set the `className`, `style`, etc.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\r\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n */\n\n\nclass InView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.node = null;\n    this._unobserveCb = null;\n\n    this.handleNode = node => {\n      if (this.node) {\n        // Clear the old observer, before we start observing a new element\n        this.unobserve();\n\n        if (!node && !this.props.triggerOnce && !this.props.skip) {\n          // Reset the state if we get a new node, and we aren't ignoring updates\n          this.setState({\n            inView: !!this.props.initialInView,\n            entry: undefined\n          });\n        }\n      }\n\n      this.node = node ? node : null;\n      this.observeNode();\n    };\n\n    this.handleChange = (inView, entry) => {\n      if (inView && this.props.triggerOnce) {\n        // If `triggerOnce` is true, we should stop observing the element.\n        this.unobserve();\n      }\n\n      if (!isPlainChildren(this.props)) {\n        // Store the current State, so we can pass it to the children in the next render update\n        // There's no reason to update the state for plain children, since it's not used in the rendering.\n        this.setState({\n          inView,\n          entry\n        });\n      }\n\n      if (this.props.onChange) {\n        // If the user is actively listening for onChange, always trigger it\n        this.props.onChange(inView, entry);\n      }\n    };\n\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView\n    } = this.props;\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold,\n      root,\n      rootMargin,\n      // @ts-ignore\n      trackVisibility,\n      // @ts-ignore\n      delay\n    }, fallbackInView);\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n\n      this._unobserveCb = null;\n    }\n  }\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const {\n        inView,\n        entry\n      } = this.state;\n      return this.props.children({\n        inView,\n        entry,\n        ref: this.handleNode\n      });\n    }\n\n    const _this$props = this.props,\n          {\n      children,\n      as\n    } = _this$props,\n          props = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n    return React.createElement(as || 'div', _extends({\n      ref: this.handleNode\n    }, props), children);\n  }\n\n}\n\n/**\r\n * React Hooks make it easy to monitor the `inView` state of your components. Call\r\n * the `useInView` hook with the (optional) [options](#options) you need. It will\r\n * return an array containing a `ref`, the `inView` status and the current\r\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\r\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\r\n * report the status.\r\n *\r\n * @example\r\n * ```jsx\r\n * import React from 'react';\r\n * import { useInView } from 'react-intersection-observer';\r\n *\r\n * const Component = () => {\r\n *   const { ref, inView, entry } = useInView({\r\n *       threshold: 0,\r\n *   });\r\n *\r\n *   return (\r\n *     <div ref={ref}>\r\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\r\n *     </div>\r\n *   );\r\n * };\r\n * ```\r\n */\n\nfunction useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange\n} = {}) {\n  const unobserve = React.useRef();\n  const callback = React.useRef();\n  const [state, setState] = React.useState({\n    inView: !!initialInView\n  }); // Store the onChange callback in a `ref`, so we can access the latest instance inside the `useCallback`.\n\n  callback.current = onChange;\n  const setRef = React.useCallback(node => {\n    if (unobserve.current !== undefined) {\n      unobserve.current();\n      unobserve.current = undefined;\n    } // Skip creating the observer\n\n\n    if (skip) return;\n\n    if (node) {\n      unobserve.current = observe(node, (inView, entry) => {\n        setState({\n          inView,\n          entry\n        });\n        if (callback.current) callback.current(inView, entry);\n\n        if (entry.isIntersecting && triggerOnce && unobserve.current) {\n          // If it should only trigger once, unobserve the element after it's inView\n          unobserve.current();\n          unobserve.current = undefined;\n        }\n      }, {\n        root,\n        rootMargin,\n        threshold,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay\n      }, fallbackInView);\n    }\n  }, // We break the rule here, because we aren't including the actual `threshold` variable\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [// If the threshold is an array, convert it to a string so it won't change between renders.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  Array.isArray(threshold) ? threshold.toString() : threshold, root, rootMargin, triggerOnce, skip, trackVisibility, fallbackInView, delay]);\n  /* eslint-disable-next-line */\n\n  React.useEffect(() => {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView\n      });\n    }\n  });\n  const result = [setRef, state.inView, state.entry]; // Support object destructuring, by adding the specific values.\n\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n  return result;\n}\n\nexport { InView, defaultFallbackInView, observe, useInView };\n//# sourceMappingURL=react-intersection-observer.modern.mjs.map\n", "import React, { useState, useMemo, useCallback, useRef } from 'react';\nimport { useInView } from 'react-intersection-observer';\n\nconst useRootMargin = offset => {\n  return `-${offset * 100}% 0px -${100 - offset * 100}% 0px`;\n}\n\nconst useProgressRootMargin = (direction, offset, node, innerHeight) => {\n  if (!node.current) return '0px';\n  const offsetHeight = (node.current.offsetHeight / innerHeight);\n  if (direction === 'down') return `${(offsetHeight - offset) * 100}% 0px ${(offset * 100) - 100}% 0px`;\n  return `-${offset * 100}% 0px ${(offsetHeight * 100) - (100 - (offset * 100))}% 0px`;\n}\n\nconst Step = props => {\n  const {\n    children,\n    data,\n    handleSetLastScrollTop,\n    lastScrollTop,\n    onStepEnter = () => {},\n    onStepExit = () => {},\n    onStepProgress = null,\n    offset,\n    scrollamaId,\n    progressThreshold,\n    innerHeight,\n  } = props;\n\n  const isBrowser = typeof window !== \"undefined\";\n  const scrollTop = isBrowser ? document.documentElement.scrollTop : 0;\n  const direction = lastScrollTop < scrollTop ? 'down' : 'up';\n\n  const rootMargin = useRootMargin(offset);\n\n  const ref = useRef(null);\n  const [isIntersecting, setIsIntersecting] = useState(false);\n\n  const {ref: inViewRef, entry} = useInView({\n    rootMargin,\n    threshold: 0,\n  });\n\n  const progressRootMargin = useMemo(\n    () => useProgressRootMargin(direction, offset, ref, innerHeight),\n    [direction, offset, ref, innerHeight]\n  );\n\n  const {ref: scrollProgressRef, entry: scrollProgressEntry} = useInView({\n    rootMargin: progressRootMargin,\n    threshold: progressThreshold,\n  });\n\n  const setRefs = useCallback(\n    (node) => {\n      ref.current = node;\n      inViewRef(node);\n      scrollProgressRef(node)\n    },\n    [inViewRef, scrollProgressRef],\n  );\n\n\n  React.useEffect(() => {\n    if (isIntersecting) {\n      const { height, top } = scrollProgressEntry.target.getBoundingClientRect();\n      const progress = Math.min(1, Math.max(0, (window.innerHeight * offset - top) / height));\n      onStepProgress &&\n      onStepProgress({\n        progress,\n        scrollamaId,\n        data,\n        element: scrollProgressEntry.target,\n        entry: scrollProgressEntry,\n        direction,\n      });\n    }\n  }, [scrollProgressEntry]);\n\n  React.useEffect(() => {\n    if (entry && !entry.isIntersecting && isIntersecting) {\n      onStepExit({ element: entry.target, scrollamaId, data, entry, direction });\n      setIsIntersecting(false);\n      handleSetLastScrollTop(scrollTop)\n    } else if (entry && entry.isIntersecting && !isIntersecting) {\n      setIsIntersecting(true);\n      onStepEnter({ element: entry.target, scrollamaId, data, entry, direction});\n      handleSetLastScrollTop(scrollTop)\n    }\n  }, [entry]);\n\n  return React.cloneElement(React.Children.only(children), {\n    'data-react-scrollama-id': scrollamaId,\n    ref: setRefs,\n    entry,\n  });\n};\n\nexport default Step;\n"],
  "mappings": "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",
  "names": ["isOffsetInPixels", "offset", "includes", "markerStyles", "position", "left", "width", "height", "borderTop", "zIndex", "offsetTextStyles", "fontSize", "fontFamily", "margin", "padding", "useTop", "offsetInPixels", "DebugOffset", "top", "React", "createThreshold", "theta", "count", "Math", "ceil", "t", "ratio", "i", "push", "Scrollama", "props", "debug", "children", "onStepEnter", "onStepExit", "onStepProgress", "threshold", "isOffsetDefinedInPixels", "useState", "lastScrollTop", "setLastScrollTop", "windowInnerHeight", "setWindowInnerHeight", "handleSetLastScrollTop", "scrollTop", "handleWindowResize", "e", "window", "innerHeight", "useEffect", "addEventListener", "removeEventListener", "isBrowser", "offsetValue", "replace", "progressThreshold", "useMemo", "Children", "map", "child", "cloneElement", "scrollamaId", "useRootMargin", "useProgressRootMargin", "direction", "node", "current", "offsetHeight", "Step", "data", "document", "documentElement", "rootMargin", "ref", "useRef", "isIntersecting", "setIsIntersecting", "useInView", "inViewRef", "entry", "progressRootMargin", "scrollProgressRef", "scrollProgressEntry", "setRefs", "useCallback", "target", "getBoundingClientRect", "progress", "min", "max", "element", "only"]
}
